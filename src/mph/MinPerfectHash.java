package mph;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;

/**
 * 
 * @author Michael Yuan
 * 
 */
public class MinPerfectHash {
   String[] rawData;
   final int keysPerBin = 4;
   Poko[] pokos;
   int binCount;

   /**
    * Constructor Using an Input File
    * 
    * @param file file being parsed into string array to be hashed
    * @throws IOException
    */
   MinPerfectHash(String file) throws IOException {
      rawData = fileToStringArray(file);
   }

   /**
    * Constructor Using an Input Array
    * 
    * @param dataArray array being hashed
    */
   MinPerfectHash(String[] dataArray) {
      rawData = dataArray;
   }

   /**
    * Create Pokos
    * 
    * Create an array of Pokos using the input data
    * 
    * @return
    */
   private Poko[] createPokos() {
      Poko[] pokos = new Poko[rawData.length];
      for (int i = 0; i < rawData.length; i++) {
         int[] h = new int[3];
         // TODO: create the hashes
         pokos[i].key = rawData[i];
         pokos[i].h = h;
      }
      return pokos;
   }

   /**
    * Generate Minimal Perfect Hash
    * 
    * Using the given input, generate minimal perfect hash (or perfect hash, undecided yet)
    */
   public void genMPH() {
      pokos = createPokos();
   }

   /**
    * Map Entries
    * 
    * Map the input using a mapping scheme generated by this class
    */
   public void mapEntries(String mapping) {

   }

   /**
    * Write Bin Mappings
    * 
    * Output the theta i for every bin that was used to achieve perfect mapping
    */
   public void writeBinMappings() {

   }

   /**
    * File to String Array
    * 
    * Takes an input file and convert it to a string array
    * 
    * @param file file being converted to string array
    * @return
    * @throws IOException
    */
   private String[] fileToStringArray(String file) throws IOException {
      LineNumberReader lnr = new LineNumberReader(new FileReader(file));
      lnr.skip(Long.MAX_VALUE);
      int lines = lnr.getLineNumber();
      lnr.close();
      BufferedReader bc_br = new BufferedReader(new FileReader(file));
      String[] data = new String[lines];
      for (int i = 0; i < lines; i++) {
         data[i] = bc_br.readLine();
      }
      bc_br.close();
      return data;
   }

   /**
    * Plain Old Key Object (Get it?)
    * 
    * @author Michael Yuan
    * 
    */
   class Poko {
      String key;
      int[] h = new int[3];
   }
}
