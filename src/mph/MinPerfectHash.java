package mph;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

/**
 * Minimal Perfect Hash
 * 
 * Class to create minimal hash for given input
 * 
 * @author Michael Yuan
 * 
 */
public class MinPerfectHash {
   String[] rawData;
   final int keysPerBin = 4;
   Poko[] pokos;
   int binCount;
   int m;
   int n;

   /**
    * Constructor Using an Input File
    * 
    * @param file file being parsed into string array to be hashed
    * @throws IOException
    */
   public MinPerfectHash(String file) throws IOException {
      rawData = Utility.fileToStringArray(file);
      init();
   }

   /**
    * Constructor Using an Input Array
    * 
    * @param dataArray array being hashed
    */
   public MinPerfectHash(String[] dataArray) {
      rawData = dataArray;
      init();
   }

   /*
    * Set Bin Count
    */
   protected void init() {
      m = rawData.length;
      binCount = m / keysPerBin + 1;
      n = (int) (m / (keysPerBin * 0.5d) + 1);
      if (n % 2 == 0)
         n++;
      while (true) {
         if (Utility.isPseudoPrime(n))
            break;
         n += 2;
      }
   }

   /**
    * Create Pokos
    * 
    * Create an array of Pokos using the input data
    * 
    * @return
    * @throws NoSuchAlgorithmException
    */
   protected Poko[] createPokos() throws NoSuchAlgorithmException {
      Poko[] pokos = new Poko[rawData.length];
      for (int i = 0; i < rawData.length; i++) {
         String hexString = Utility.hash256_16bytes(rawData[i], 9);
         pokos[i] = new Poko();
         pokos[i].bucketNum = Integer.valueOf(hexString.subSequence(0, 6).toString(), 16) % binCount;
         pokos[i].f = Integer.valueOf(hexString.subSequence(6, 12).toString(), 16);
         pokos[i].h = Integer.valueOf(hexString.subSequence(12, 18).toString(), 16);
      }
      return pokos;
   }

   /**
    * Generate Minimal Perfect Hash
    * 
    * Using the given input, generate minimal perfect hash (or perfect hash, undecided yet)
    * 
    * @throws NoSuchAlgorithmException
    */
   public void genMPH() throws NoSuchAlgorithmException {
      pokos = createPokos();
   }

   /**
    * Map Entries
    * 
    * Map the input using a mapping scheme generated by this class
    */
   public void mapEntries(String mapping) {

   }

   /**
    * Write Bin Mappings
    * 
    * Output the theta i for every bin that was used to achieve perfect mapping
    */
   public void writeBinMappings() {

   }


   /**
    * Plain Old Key Object (Get it?)
    * 
    * @author Michael Yuan
    * 
    */
   protected class Poko {
      protected int bucketNum;
      protected int f;
      protected int h;
   }
}
